#!/usr/bin/env python3
"""
Vista Previa del Mapa (Modo Texto)
==================================

Este script muestra una representaci√≥n en texto del mapa creado,
√∫til para verificar la estructura sin necesidad de pygame.
"""

import sys
import os

# A√±adir el directorio src al path
sys.path.append('src')

def preview_map():
    """Muestra una vista previa del mapa en modo texto"""
    
    print("=== VISTA PREVIA DEL MAPA ===")
    print()
    
    # Simulamos la creaci√≥n del mapa sin pygame
    width, height = 800, 600
    tile_size = 32
    cols = width // tile_size
    rows = height // tile_size
    
    print(f"Dimensiones del mapa: {cols}x{rows} tiles ({width}x{height} p√≠xeles)")
    print(f"Tama√±o de cada tile: {tile_size}x{tile_size} p√≠xeles")
    print()
    
    # Creamos el mapa con la misma l√≥gica que TileMap
    map_data = []
    for row in range(rows):
        map_row = []
        for col in range(cols):
            # Bordes del mapa con muros de ladrillo
            if row == 0 or row == rows-1 or col == 0 or col == cols-1:
                map_row.append('üß±')  # brick_wall
            
            # Casa en la esquina superior izquierda
            elif 2 <= row <= 5 and 2 <= col <= 6:
                if row == 2 or row == 5:  # Techo
                    map_row.append('üè†')  # roof_red
                elif col == 2 or col == 6:  # Paredes
                    map_row.append('üß±')  # brick_wall
                elif row == 5 and col == 4:  # Puerta
                    map_row.append('üö™')  # door
                elif (row == 3 and col in [3, 5]) or (row == 4 and col in [3, 5]):  # Ventanas
                    map_row.append('ü™ü')  # window
                else:  # Interior
                    map_row.append('‚¨ú')  # stone_light
            
            # Lago en el centro-derecha
            elif col > cols * 0.6 and row > rows * 0.3 and row < rows * 0.7:
                # Lago con diferentes profundidades
                center_col = cols * 0.75
                center_row = rows * 0.5
                distance = ((col - center_col) ** 2 + (row - center_row) ** 2) ** 0.5
                if distance < 3:
                    map_row.append('üåä')  # water_deep
                else:
                    map_row.append('üíß')  # water
            
            # Bosque de √°rboles en la parte inferior
            elif row > rows * 0.75:
                if (row + col) % 3 == 0:  # Patr√≥n para distribuir √°rboles
                    map_row.append('üå≥')  # tree_trunk
                else:
                    map_row.append('üå±')  # grass
            
            # Camino de piedra horizontal
            elif row == rows // 2:
                map_row.append('ü™®')  # cobblestone
            # Camino de piedra vertical
            elif col == cols // 2:
                map_row.append('‚¨ú')  # stone_light
            
            # Zona des√©rtica en la esquina inferior derecha
            elif row > rows * 0.6 and col > cols * 0.8:
                map_row.append('üèúÔ∏è')  # sand
            
            # Zona de tierra cultivada
            elif rows * 0.7 <= row < rows * 0.75 and cols * 0.1 <= col < cols * 0.4:
                map_row.append('üü´')  # dirt
            
            # Algunos √°rboles dispersos en zona de c√©sped
            elif (row == 3 and col in [10, 15, 20]) or (row == 8 and col in [8, 18]) or (row == 12 and col in [5, 12, 22]):
                map_row.append('üå≥')  # tree_trunk
            
            # El resto es c√©sped
            else:
                map_row.append('üå±')  # grass
                
        map_data.append(map_row)
    
    # Mostrar el mapa
    print("MAPA (Vista general):")
    print("=" * (cols + 2))
    for row in map_data:
        print("|" + "".join(row) + "|")
    print("=" * (cols + 2))
    print()
    
    # Leyenda
    print("LEYENDA:")
    legend = {
        'üå±': 'C√©sped (caminable, velocidad normal)',
        '‚¨ú': 'Piedra (caminable, velocidad +10%)',
        'ü™®': 'Adoquines (caminable, velocidad +10%)',
        'üß±': 'Muro (NO caminable)',
        'üå≥': '√Årbol (NO caminable)',
        'üíß': 'Agua (NO caminable)',
        'üåä': 'Agua profunda (NO caminable)',
        'üè†': 'Techo (NO caminable)',
        'üö™': 'Puerta (caminable)',
        'ü™ü': 'Ventana (NO caminable)',
        'üèúÔ∏è': 'Arena (caminable, velocidad -30%)',
        'üü´': 'Tierra (caminable, velocidad -20%)'
    }
    
    for emoji, description in legend.items():
        print(f"  {emoji} = {description}")
    
    print()
    print("CARACTER√çSTICAS DEL MAPA:")
    print("- Casa completa con techo, paredes, ventanas y puerta")
    print("- Lago con centro profundo y orillas normales")
    print("- Bosque denso en la parte inferior")
    print("- Caminos de piedra horizontales y verticales")
    print("- Zona des√©rtica en esquina inferior derecha")
    print("- √Årea de cultivo en la zona media-izquierda")
    print("- √Årboles dispersos en zonas de c√©sped")
    print("- Per√≠metro completamente amurallado")
    
    # Estad√≠sticas
    total_tiles = rows * cols
    tile_counts = {}
    for row in map_data:
        for tile in row:
            tile_counts[tile] = tile_counts.get(tile, 0) + 1
    
    print(f"\nESTAD√çSTICAS:")
    print(f"Total de tiles: {total_tiles}")
    for tile, count in sorted(tile_counts.items()):
        percentage = (count / total_tiles) * 100
        print(f"  {tile}: {count} tiles ({percentage:.1f}%)")

if __name__ == "__main__":
    preview_map()